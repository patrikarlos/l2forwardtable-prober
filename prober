#!/usr/bin/perl

use strict;
use warnings;

use Net::SNMP;
use Net::SNMP::Util;
use Net::SNMP::Util::OID;

use Getopt::Long;

use Data::Dumper;


sub probe_device {
	
	my ($switch, $community, $version) = @_;

	my %dataStore;
	

	my ($session, $err) = Net::SNMP->session( -hostname => $switch, -version => $version, -community => $community, -timeout => 2, -retries => 2);

	if (!defined($session)) {
		print "Can't create SNMP session to $switch: $err\n";
		return(-1);
	}

#	print "Session created.\n";
	my %oids = ( dot1dTpFdbEntryAddress => '1.3.6.1.2.1.17.4.3.1.1',
		     dot1dTpFdbEntryPort 	=> '1.3.6.1.2.1.17.4.3.1.2',
		     dot1dTpFdbEntryStatus 	=> '1.3.6.1.2.1.17.4.3.1.3',				 
		     dot1qTpFdbAddress 		=> '1.3.6.1.2.1.17.7.1.2.2.1.1',
		     dot1qTpFdbPort 		=> '1.3.6.1.2.1.17.7.1.2.2.1.2',
		     dot1qTpFdbStatus 		=> '1.3.6.1.2.1.17.7.1.2.2.1.3',
		     dot1qVlanStaticName	=> '1.3.6.1.2.1.17.7.1.4.3.1.1',
		     sysDescr			=> '1.3.6.1.2.1.1.1',
		     dot1dBasePortIfIndex       => '1.3.6.1.2.1.17.1.4.1.2',
		     ifName 			=> '1.3.6.1.2.1.31.1.1.1.1');
	
	
	my ($result,$error)=snmpwalk( snmp => $session, oids => \%oids);
	
	if ( !defined($result) ) {
	    print "[ERROR] $switch, $error\n";
		return;
	}
	
#	printf "%s \n", $result->{sysDescr}{0};

	my $SwitchType='default';
#	if ($result->{sysDescr}{0} =~ /ProSafe/ ) {
	#		$SwitchType='default';
#	}
	if ($result->{sysDescr}{0} =~ /\bHP\b/ ) {
	    $SwitchType='HP';
	}
	if ($result->{sysDescr}{0} =~ /\bCatalyst 4500\b/ ) {
	    $SwitchType='C4500';
#	    print "Special cisco\n";
	}

#Find the VLANs that are present on devicve.
	my $k;
	my @vlanArr=[];
	my @vlanVid=[];
	if ( $SwitchType =~ /C4500/ ) {
	    foreach $k (sort keys %{$result->{ifName}}) {
#		printf("Found $k => %s\n",$result->{ifName}{$k});
		if ( $result->{ifName}{$k} =~ /vlan/i) {
		    my $vid= $result->{ifName}{$k} =~ s/vlan-//ir; 
		    push(@vlanArr, $result->{ifName}{$k});
		    push(@vlanVid,$vid);
		}
	    }
	    
	    
	} else {
	    foreach $k (sort keys %{$result->{dot1qVlanStaticName}}) {
		push(@vlanArr, $result->{dot1qVlanStaticName}{$k});
	    }
	}

## Kept just for debugging reasons, will print the information found
#	foreach my $i (1 .. $#vlanArr){
#		print "$i -- $vlanArr[$i] \n";
#	}
#	print "Vid:\n";
#	foreach my $i (1 .. $#vlanVid){
#		print "$i -- $vlanVid[$i] \n";
#	}

	my $meCount=0;

	if ( !($SwitchType =~ "C4500") ) {
	    foreach my $index ( sort keys %{$result->{dot1qTpFdbStatus}} ){
		
		my ($vlan,$a1,$a2,$a3,$a4,$a5,$a6)=split(/\./,$index);
		my $macAdd=sprintf("0x%02x%02x%02x%02x%02x%02xx",$a1,$a2,$a3,$a4,$a5,$a6);
		if ($SwitchType =~ /HP/ ){
		    $vlan=$vlanArr[$vlan];
		}
		
		if ( $result->{dot1qTpFdbStatus}{$index} <6 ){
#		    printf "$switch %s ",$macAdd; #, ($result->{dot1qTpFdbPort}{$index}=~ s/ /-/g) ;   # dot1dTpFdbPort
		    my $portName='';
		    my $portNo='';
		    if ($result->{dot1qTpFdbPort}{$index} > 0 ){
			$portName=$result->{ifName}{$result->{dot1qTpFdbPort}{$index}};
			$portName =~ s/\s/_/g;
		    } else {
			$portName="NA";
		    }
#		    printf " %s vlan:$vlan  ", $portName; #$result->{ifName}{$result->{dot1qTpFdbPort}{$index}};
		    if ( $result->{dot1qTpFdbStatus}{$index} == 1 ){
			$portNo=$result->{ifName}{$result->{dot1qTpFdbPort}{$index}};
#			printf "Other ";
		    }
		    if ( $result->{dot1qTpFdbStatus}{$index} == 2 ){
			$portNo=$result->{ifName}{$result->{dot1qTpFdbPort}{$index}};
#			printf "Invalid ";
		    }
		    if ( $result->{dot1qTpFdbStatus}{$index} == 3 ){
			$portNo=$result->{ifName}{$result->{dot1qTpFdbPort}{$index}};
#			printf "Learned ";
		    }
		    if ( $result->{dot1qTpFdbStatus}{$index} == 4 ){
			$portNo=0;
#			printf "Self ";
		    }
		    if ( $result->{dot1qTpFdbStatus}{$index} == 5 ){
			$portNo=$result->{ifName}{$result->{dot1qTpFdbPort}{$index}};
#			printf "Mgnt ";
		    }
		    
#		    printf "\n";
		    my %info = (
			status =>  sprintf("%s ", $result->{dot1qTpFdbStatus}{$index}),
			switch => $switch,
			portName => sprintf("%s ", $portName),
			port =>  sprintf("%s ",$portNo),
			vlanName => $vlan,
			);
		    
		    $dataStore{$macAdd} = \%info;		    
		} else {
		    ## SELF
		    $meCount++;
#		    printf(" Found me, for $meCount time it was a %d.\n", $result->{dot1qTpFdbStatus}{$index});
		}
		
	    }
	} else {
#	    print "Cisco Loop, there are $#vlanVid  to test.\n";


	    foreach my $vid (1 .. $#vlanVid) {
		my $communitystr=sprintf("%s@%d",$community,$vlanVid[$vid]);
#		print "Probing $switch with $communitystr \n";
		($session, $err) = Net::SNMP->session( -hostname => $switch, -version => $version, -community => $communitystr, -timeout => 2, -retries => 2);
		
		if (!defined($session)) {
		    print "Can't create SNMP session to $switch: $err\n";
		    return(-1);
		}
		
#		print "Session created.\n";
		($result,$error)=snmpwalk( snmp => $session, oids => \%oids);
		
		if ( !defined($result) ) {
		    print "[ERROR] $switch, $error\n";
		    return;
		}
		my $portName;
		my $portNo;
		foreach my $index ( sort keys %{$result->{dot1dTpFdbEntryAddress}} ){
		    if (length($result->{dot1dTpFdbEntryAddress}{$index})==14 ){
			if ($result->{dot1dTpFdbEntryStatus}{$index} != 4 ){
			    $portName=$result->{ifName}{$result->{dot1dBasePortIfIndex}{$result->{dot1dTpFdbEntryPort}{$index}}};
			    $portName =~ s/\s/_/g;
			} else {
			    $portName="NA";
			}	
			
#			printf "$switch %s %s vlan:%s ", 
#			    $result->{dot1dTpFdbEntryAddress}{$index},   # dot1dTpFdbAddress
#			    $portName,
#			    $vlanVid[$vid]; 
			
			if ( $result->{dot1dTpFdbEntryStatus}{$index} == 1 ){
#			    printf "Other ";
			    $portNo=$result->{dot1dBasePortIfIndex}{$result->{dot1dTpFdbEntryPort}{$index}};
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 2 ){			  
#			    printf "Invalid ";
			    $portNo=$result->{dot1dBasePortIfIndex}{$result->{dot1dTpFdbEntryPort}{$index}};
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 3 ){
#			    printf "Learned ";
			    $portNo=$result->{dot1dBasePortIfIndex}{$result->{dot1dTpFdbEntryPort}{$index}};
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 4 ){
#			    printf "Self ";
			    $portNo=0;
			}else {
#			    printf "Mgnt ";
			    $portNo=$result->{dot1dBasePortIfIndex}{$result->{dot1dTpFdbEntryPort}{$index}};
			    
			}
#			printf "\n";
			my %info = (
			    switch => $switch,
			    port =>  sprintf("%s ",$portNo),
			    portName => sprintf("%s ",$portName),
			    status =>  sprintf("%s ", $result->{dot1dTpFdbEntryStatus}{$index}),
			    vlanName => $vlanVid[$vid],
			    );
			
			$dataStore{ $result->{dot1dTpFdbEntryAddress}{$index}} = \%info;
		    } else {			
			## SELF
			$meCount=$meCount+1;
#			printf(" Found a strange address, for $meCount time .\n");
		    }
		}
		
	    }	    
	}
	print "Done\n";
#	print Dumper(\%dataStore);

	foreach my $macadd ( sort keys %dataStore ){
	    printf("%s %s %s %s %s\n", $dataStore{$macadd}{switch},
		   $dataStore{$macadd}{vlanName}, 
		   $dataStore{$macadd}{portName},
		   $dataStore{$macadd}{status},
		   $macadd);	    
	}
	
	return;
}
	
my ($device,$com,$version) = @ARGV;



probe_device($device,$com,$version);
	
	
