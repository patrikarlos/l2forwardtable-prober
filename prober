#!/usr/bin/perl

use strict;
use warnings;

use Net::SNMP;
use Net::SNMP::Util;
use Getopt::Long;




sub probe_device {
	
	my ($switch, $community, $version) = @_;


#	if ($version==1) {
#		print "SNMPwalk only works with 2c or higher";
#		return(-1);
#	}

	my ($session, $err) = Net::SNMP->session( -hostname => $switch, -version => $version, -community => $community, -timeout => 2, -retries => 2);

	if (!defined($session)) {
		print "Can't create SNMP session to $switch: $err\n";
		return(-1);
	}
	print "Session created.\n";
	my %oids = ( dot1dTpFdbEntryAddress => '1.3.6.1.2.1.17.4.3.1.1',
				 dot1dTpFdbEntryPort 	=> '1.3.6.1.2.1.17.4.3.1.2',
				 dot1dTpFdbEntryStatus 	=> '1.3.6.1.2.1.17.4.3.1.3',				 
				 dot1qTpFdbAddress 		=> '1.3.6.1.2.1.17.7.1.2.2.1.1',
				 dot1qTpFdbPort 		=> '1.3.6.1.2.1.17.7.1.2.2.1.2',
				 dot1qTpFdbStatus 		=> '1.3.6.1.2.1.17.7.1.2.2.1.3',
				 dot1qVlanStaticName	=> '1.3.6.1.2.1.17.7.1.4.3.1.1',
				 sysDescr				=> '1.3.6.1.2.1.1.1',
				 ifName 				=> '1.3.6.1.2.1.31.1.1.1.1');
			  
	
	my ($result,$error)=snmpwalk( snmp => $session, oids => \%oids);
	
	if ( !defined($result) ) {
		print "[ERROR] $switch, $error\n";
		return;
	}
	
	printf "%s ", $result->{sysDescr}{0};

	my $SwitchType='default';
#	if ($result->{sysDescr}{0} =~ /ProSafe/ ) {
#		$SwitchType='default';
#	}
	if ($result->{sysDescr}{0} =~ /\bHP\b/ ) {
		$SwitchType='HP';
	}
			
	print "dot1dTp";
	foreach my $index ( sort keys %{$result->{dot1dTpFdbEntryAddress}} ){
#        printf " - $index - ";

		if ($result->{dot1dTpFdbEntryStatus}{$index} != 4 ){
			printf "%s %s ",
				$result->{dot1dTpFdbEntryAddress}{$index},   # dot1dTpFdbAddress
				$result->{dot1dTpFdbEntryPort}{$index};   # dot1dTpFdbPort
			if ($result->{dot1dTpFdbEntryPort}{$index} > 0 ){
				printf "( %s )", $result->{ifName}{$result->{dot1dTpFdbEntryPort}{$index}};
			} else {
				printf "( N/A )";
			}
			printf "%s ",
				$result->{dot1dTpFdbEntryStatus}{$index};   # dot1dTpFdbStatus
			if ( $result->{dot1dTpFdbEntryStatus}{$index} == 1 ){
				printf "Other ";
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 2 ){
				printf "Invalid ";
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 3 ){
				printf "Learned ";
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 4 ){
				printf "Self ";
			}else {
				printf "Mgnt ";
		
			}	
			printf "\n";
		}


    }

	print "dot1qVlanStaticName\n";
	my $k;
	my @vlanArr=[];
	foreach $k (sort keys %{$result->{dot1qVlanStaticName}}) {
#		printf("$k => %s\n",$result->{dot1qVlanStaticName}{$k});
		push(@vlanArr, $result->{dot1qVlanStaticName}{$k});
	}
	
	
#	foreach my $i (1 .. $#vlanArr){
#		print "$i -- $vlanArr[$i] \n";
#	}
	print "dot1qTpFdbStatus\n";
	
 foreach my $index ( sort keys %{$result->{dot1qTpFdbStatus}} ){
 ##        printf "$switch - $index - ";


##		printf("Index= %s |", $index);
		my ($vlan,$a1,$a2,$a3,$a4,$a5,$a6)=split(/\./,$index);
		my $macAdd=sprintf("0x%x%x%x%x%x%x",$a1,$a2,$a3,$a4,$a5,$a6);
		if ($SwitchType =~ /HP/ ){
			$vlan=$vlanArr[$vlan];
		}


		if ( $result->{dot1qTpFdbStatus}{$index} <4 ){
			 printf "%s %s ",
				 $macAdd,   # dot1dTpFdbAddress
				 $result->{dot1qTpFdbPort}{$index};   # dot1dTpFdbPort
				 
			if ($result->{dot1qTpFdbPort}{$index} > 0 ){
				printf "( %s (vlan $vlan))", $result->{ifName}{$result->{dot1qTpFdbPort}{$index}};
			} else {
				printf "( N/A )";
			}
			printf "%s ",
				$result->{dot1qTpFdbStatus}{$index};   # dot1dTpFdbStatus
			if ( $result->{dot1qTpFdbStatus}{$index} == 1 ){
				printf "Other ";
			}
			if ( $result->{dot1qTpFdbStatus}{$index} == 2 ){
				printf "Invalid ";
			}
			if ( $result->{dot1qTpFdbStatus}{$index} == 3 ){
				printf "Learned ";
			}
			if ( $result->{dot1qTpFdbStatus}{$index} == 4 ){
				printf "Self ";
			}
			if ( $result->{dot1qTpFdbStatus}{$index} == 5 ){
				printf "Mgnt ";
			}
			printf "\n";
		}
    }	
	print "Done\n";
	

	return;
}

my ($device,$com) = @ARGV;

probe_device($device,$com,'2');
	
	