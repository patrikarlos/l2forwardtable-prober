#!/usr/bin/perl

use strict;
use warnings;

use Net::SNMP;
use Net::SNMP::Util;
use Net::SNMP::Util::OID;

use Getopt::Long;

use Data::Dumper;


sub probe_device {
	
	my ($switch, $community, $version) = @_;

	my %dataStore;
	

#	if ($version==1) {
#		print "SNMPwalk only works with 2c or higher";
#		return(-1);
#	}

	my ($session, $err) = Net::SNMP->session( -hostname => $switch, -version => $version, -community => $community, -timeout => 2, -retries => 2);

	if (!defined($session)) {
		print "Can't create SNMP session to $switch: $err\n";
		return(-1);
	}

	print "Session created.\n";
	my %oids = ( dot1dTpFdbEntryAddress => '1.3.6.1.2.1.17.4.3.1.1',
		     dot1dTpFdbEntryPort 	=> '1.3.6.1.2.1.17.4.3.1.2',
		     dot1dTpFdbEntryStatus 	=> '1.3.6.1.2.1.17.4.3.1.3',				 
		     dot1qTpFdbAddress 		=> '1.3.6.1.2.1.17.7.1.2.2.1.1',
		     dot1qTpFdbPort 		=> '1.3.6.1.2.1.17.7.1.2.2.1.2',
		     dot1qTpFdbStatus 		=> '1.3.6.1.2.1.17.7.1.2.2.1.3',
		     dot1qVlanStaticName	=> '1.3.6.1.2.1.17.7.1.4.3.1.1',
		     sysDescr			=> '1.3.6.1.2.1.1.1',
		     dot1dBasePortIfIndex       => '1.3.6.1.2.1.17.1.4.1.2',
		     ifName 			=> '1.3.6.1.2.1.31.1.1.1.1');
	
	
	my ($result,$error)=snmpwalk( snmp => $session, oids => \%oids);
	
	if ( !defined($result) ) {
	    print "[ERROR] $switch, $error\n";


	    
		return;
	}



	
	
	printf "%s \n", $result->{sysDescr}{0};

	my $SwitchType='default';
#	if ($result->{sysDescr}{0} =~ /ProSafe/ ) {
	#		$SwitchType='default';
#	}
	if ($result->{sysDescr}{0} =~ /\bHP\b/ ) {
	    $SwitchType='HP';
	}
	if ($result->{sysDescr}{0} =~ /\bCatalyst 4500\b/ ) {
	    $SwitchType='C4500';
	    print "Special cisco\n";
	}

	print "dot1qVlanStaticName\n";
	my $k;
	my @vlanArr=[];
	my @vlanVid=[];
	if ( $SwitchType =~ /C4500/ ) {
	    foreach $k (sort keys %{$result->{ifName}}) {
#		printf("Found $k => %s\n",$result->{ifName}{$k});
		if ( $result->{ifName}{$k} =~ /vlan/i) {
		    my $vid= $result->{ifName}{$k} =~ s/vlan-//ir; 
		    push(@vlanArr, $result->{ifName}{$k});
		    push(@vlanVid,$vid);
		}
	    }
	    
	    
	} else {
	    foreach $k (sort keys %{$result->{dot1qVlanStaticName}}) {
#		printf("$k => %s\n",$result->{dot1qVlanStaticName}{$k});
		push(@vlanArr, $result->{dot1qVlanStaticName}{$k});
	    }
	}
	
#	foreach my $i (1 .. $#vlanArr){
#		print "$i -- $vlanArr[$i] \n";
#	}

#	print "Vid:\n";
#	foreach my $i (1 .. $#vlanVid){
#		print "$i -- $vlanVid[$i] \n";
#	}

	
	print "dot1qTpFdbStatus\n";

	if ( !($SwitchType =~ "C4500") ) {
	    foreach my $index ( sort keys %{$result->{dot1qTpFdbStatus}} ){
		printf "$switch - $index - ";
		
		my ($vlan,$a1,$a2,$a3,$a4,$a5,$a6)=split(/\./,$index);
		my $macAdd=sprintf("0x%x%x%x%x%x%x",$a1,$a2,$a3,$a4,$a5,$a6);
		if ($SwitchType =~ /HP/ ){
		    $vlan=$vlanArr[$vlan];
		}
		
		
		if ( $result->{dot1qTpFdbStatus}{$index} <4 ){
		    printf "%s %s ",$macAdd, $result->{dot1qTpFdbPort}{$index};;   # dot1dTpFdbPort
		    if ($result->{dot1qTpFdbPort}{$index} > 0 ){
			printf "( %s (vlan $vlan))", $result->{ifName}{$result->{dot1qTpFdbPort}{$index}};
		    } else {
			printf "( N/A )";
		    }
		    printf "%s ",
			$result->{dot1qTpFdbStatus}{$index};   # dot1dTpFdbStatus
		    if ( $result->{dot1qTpFdbStatus}{$index} == 1 ){
			printf "Other ";
		    }
		    if ( $result->{dot1qTpFdbStatus}{$index} == 2 ){
			printf "Invalid ";
		    }
		    if ( $result->{dot1qTpFdbStatus}{$index} == 3 ){
			printf "Learned ";
		    }
		    if ( $result->{dot1qTpFdbStatus}{$index} == 4 ){
			printf "Self ";
		    }
		    if ( $result->{dot1qTpFdbStatus}{$index} == 5 ){
			printf "Mgnt ";
		    }
		    printf "\n";
		    my %info = (
			switch => $switch,
			port =>  sprintf("%s ",$result->{ifName}{$result->{dot1qTpFdbPort}{$index}}),
			portName => sprintf("%s ", $result->{ifName}{$result->{dot1qTpFdbPort}{$index}}),
			status =>  sprintf("%s ", $result->{dot1qTpFdbStatus}{$index}),
			vlanName => $vlan,
			);
		    
		    $dataStore{$macAdd} = \%info;
		    
		}
	    }
	} else {
	    print "Cisco Loop, there are $#vlanVid  to test.\n";


	    foreach my $vid (1 .. $#vlanVid) {
		my $communitystr=sprintf("%s@%d",$community,$vlanVid[$vid]);
		print "Probing $switch with $communitystr \n";
		($session, $err) = Net::SNMP->session( -hostname => $switch, -version => $version, -community => $communitystr, -timeout => 2, -retries => 2);
		
		if (!defined($session)) {
		    print "Can't create SNMP session to $switch: $err\n";
		    return(-1);
		}
		
		print "Session created.\n";
		($result,$error)=snmpwalk( snmp => $session, oids => \%oids);
		
		if ( !defined($result) ) {
		    print "[ERROR] $switch, $error\n";
		    return;
		}
		foreach my $index ( sort keys %{$result->{dot1dTpFdbEntryAddress}} ){
#		    printf "->index: - $index - \n";
			
		    if ($result->{dot1dTpFdbEntryStatus}{$index} != 4 && length($result->{dot1dTpFdbEntryAddress}{$index})==14 ){
			printf "%d %s %s (%s) ", $vlanVid[$vid], 
			    $result->{ifName}{$result->{dot1dBasePortIfIndex}{$result->{dot1dTpFdbEntryPort}{$index}}},
			    $result->{dot1dTpFdbEntryAddress}{$index},   # dot1dTpFdbAddress
			    $result->{dot1dTpFdbEntryPort}{$index};   # dot1dTpFdbPort


#			if ($result->{dot1dTpFdbEntryPort}{$index} > 0 ){
#			    printf "( %s )", $result->{ifName}{$result->{dot1dBasePortIfIndex}{$result->{dot1dTpFdbEntryPort}{$index}}};
#			} else {
#			    printf "( N/A )";
#			}
			printf "%s ", $result->{dot1dTpFdbEntryStatus}{$index};   # dot1dTpFdbStatus
			if ( $result->{dot1dTpFdbEntryStatus}{$index} == 1 ){
			    printf "Other ";
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 2 ){
			    printf "Invalid ";
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 3 ){
			    printf "Learned ";
			}elsif ( $result->{dot1dTpFdbEntryStatus}{$index} == 4 ){
			    printf "Self ";
			}else {
			    printf "Mgnt ";
			    
			}
			printf "\n";				
		    }
#		    printf "<-index: $index";

		}
		
	    }
	    
	    print "Done\n";
	    print Dumper(\%dataStore);
	    
	    
	    return;
	}
}
	
my ($device,$com) = @ARGV;



probe_device($device,$com,'2');
	
	
